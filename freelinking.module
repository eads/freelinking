<?php
// freelinking3 -- flexible linking of content

function freelinking_filter($op, $delta = 0, $format = -1,
  $text = '', $langcode = '', $cache_id = 0) {

  switch ($op) {
    case 'list':
      return array(0 => 'freelinking filter');
    case 'no cache':
      return FALSE;
    case 'description':
      return t('Allows for a flexible format for linking content');
    case 'process':
      $freelinking = _freelinking_get_plugins();

      // Handle default freelinks first (no colon)
      $regex = '/[^\\\\]\[\[([^:]+)]]/Uu';
      preg_match_all($regex, $text, $defaultmatches, PREG_SET_ORDER);
      $defaultplugin = variable_get('freelinking_default', 'nodetitle');

      // loop through default matches
      foreach ($defaultmatches as $match) {
        if ($freelinking[$defaultplugin]['translate']) {
          // run the default text through tr
          $new = strtr($match[1], $freelinking[$defaultplugin]['translate']);
        }
        else {
          $new = $match[1];
        }

        // process the replacement pattern
        if ($freelinking[$defaultplugin]['replacement']) {
          $pattern = '/' . preg_quote($match[0]) . '/';
          $replacement = '<a href="'
            . preg_replace('/%1/', $new,
              $freelinking[$defaultplugin]['replacement'])
            . '">' . $match[1] . '</a>';
          $text = preg_replace($pattern, $replacement, $text);
        }
        // uses a callback function
        elseif ($freelinking[$defaultplugin]['callback']) {
          // capture the match for replacement callback.
          $pattern = '/[^\\\\]\[\[(' . $match[1] . ')]]/';
          $text = preg_replace_callback($pattern,
            $freelinking[$defaultplugin]['callback'], $text);
        }
      } // endforeach looping through default matches

      // Handle regular format (non-default) freelinks
      $regex = '/[^\\\\]\[\[(.+):(.+)]]/Uu';
      $stuff_to_do = preg_match_all($regex, $text, $pregmatches,
        PREG_PATTERN_ORDER); // scarf all into matches

      // there was at least one hit on our regex
      if ($stuff_to_do) {
        $matches = array_merge($pregmatches[1], $pregmatches[2]);
        // loop through matches
        for ($match = 0; $match < $stuff_to_do ; $match++) {
          // key is the indicator, value is the target
          $key = $pregmatches[1][$match];
          $value = $pregmatches[2][$match];
          foreach (array_keys($freelinking) as $plugin) {
            // got a hit
            if (preg_match($freelinking[$plugin]['indicator'], $key)) {
              $pattern = '/\[\[' . $key . ':(' . $value . ')]]/';
              // It's just a replacement pattern
              if ($freelinking[$plugin]['replacement']) {
                // there's some prematch tr to do
                if ($freelinking[$plugin]['translate']) {
                  $new = strtr($value, $freelinking[$plugin]['translate']);
                } // endif translation to do first
                else {
                  $new = $value;
                }
                $replacement = '<a href="'
                  . preg_replace('/%1/', $new,
                    $freelinking[$plugin]['replacement'])
                  . '">' . $value . '</a>';
                $text = preg_replace($pattern, $replacement, $text);
              } // replacement pattern only
              // plugin uses a callback function
              elseif ($freelinking[$plugin]['callback']) {
                $text = preg_replace_callback($pattern,
                  $freelinking[$plugin]['callback'], $text);
              } // endifelse plugin uses a callback
            } // endif looking for plugins that match
          } // endforeach looping through plugins
        } // endfor looping through matches
      } // endif $stuff to do
      return $text;
    case 'prepare':
    default:
      return $text;
  } // endswitch $op
} // endfunction freelinking_filter

function freelinking_menu() {
  $items['admin/settings/freelinking'] = array(
    'title' => 'Freelinking settings',
    'description' => 'Configure settings for the freelinking input filter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freelinking_settings'),
    'access arguments' => array('administer freelinking'),
  );
  return $items;
} // endfunction freelinking_menu

function freelinking_settings() {
  $form = array();

  foreach(_freelinking_get_plugins() as $plugin => $definition) {
    $available_plugins[$plugin] = $plugin;
    if (function_exists($definition['settings'])) {
      $plugin_with_settings[$plugin] = $definition['settings'];
    }
  }

  // set the default plugin
  $form['freelinking_default'] = array(
    '#title' => t('Plugin to use when not indicated in the freelink'),
    '#type'  => 'select',
    '#multiple' => FALSE,
    '#options' => $available_plugins,
    '#default_value' => variable_get('freelinking_default', 'nodetitle'),
    '#description' => t('Use this plugin when a freelink is created without specifying which plugin to use. If unsure, "nodetitle" mimics the behavior of previous versions of freelinking.'),
  );

  // loop through plugin settings functions, adding a fieldset for each
  foreach ($plugin_with_settings as $plugin=>$callback) {
    $form[$plugin] = array(
      '#title' => t('Settings for !plugin plugin', array('!plugin' => ucfirst($plugin))),
      '#type'  => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
     );
    $form[$plugin]['settings'] = call_user_func($callback);
  } // endforeach looping through plugins with settings

  return system_settings_form($form);
} // endfunction freelinking_settings (admin settings)

/**
 * Implementation of hook_freelinking()
 * Include .inc plugins
 */
function freelinking_freelinking() {
  $files = file_scan_directory(
    drupal_get_path('module', 'freelinking') . '/plugins/', '.inc');
  foreach($files as $absolute => $file) {
    require $absolute;
  }
  foreach ($freelinking as $plugin => $definition)
  {
    if(!$definition['settings']) {
      $freelinking[$plugin]['settings'] = 'freelinking_' . $plugin . '_settings';
    }
  }
  return $freelinking;
}

/**
 * module_invoke_all once per pageload. May be unnecessary.
 */
function _freelinking_get_plugins() {
  static $freelinking;
  if($freelinking) {
    return $freelinking;
  }
  $freelinking = module_invoke_all('freelinking');
  return $freelinking;
}

// vim: tw=300 nowrap syn=php
