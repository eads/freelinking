<?php
/* freelinking.module -- implements CamelCase and [[free links]] filter for Drupal
   ea. Farris <eafarris@gmail.com>
   portions based on code from crw: http://ninjafish.org/project/wiki

   Drupal freelinking project: http://www.drupal.org/project/freelinking

   $Id$
*/

function freelinking_menu($may_cache) {
  global $user;
  $items = array();

  if ($may_cache) {
    $items[] = array( 'path' => 'freelinking', 
                      'title' => t('freelinks'),
                      'access' => user_access('access content'),
                      'callback' => 'freelinking_page'
                    );
  }
  return $items;
} // endfunction freelinking_menu

function freelinking_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables freelinking between nodes using CamelCase and delimiters (like [[ and ]]).');
      break;
  } // endswitch ($section)
} // endfunction freelinking_help

function freelinking_page($thetitle = NULL) {
  if ($thetitle) { // find the matching title
    $freelink = _freelinking_make_link($thetitle);
    drupal_goto($freelink['path'], $freelink['args'] ? $freelink['args'] : '');
  }
  else { // no title was passed -- show a list of wikiwords and status
    $header = array('phrase', 'target');
    $query = "SELECT phrase, path FROM {freelinking} ORDER BY phrase";
    $result = db_query($query);
    $i = 0;
    while ($freelink = db_fetch_object($result)) { // looping through phrase, target pairs
      $rows[$i][] = urldecode($freelink->phrase);
      if (preg_match('/^(http|mailto|https|ftp):/', $freelink->path)) { // an absolute link
        $rows[$i][] = '<a class="freelink" href="' . $freelink->path . '">' . $flpair->path . '</a>';
      }
      else { // a freelink
        $fltargetnid = _freelinking_exists($freelink->phrase);
        $freelink = _freelinking_make_link($freelink->phrase);
        if ($fltargetnid) {
          $link = l(t('see this content'), drupal_get_path_alias('node/' . $fltargetnid));
        }
        else { // content not found, show link to create
          $link = '<a href=' . url($freelink['path'], $freelink['args']) . '>' . t('create this content') . '</a>';
        }
        $rows[$i][] = $link;
      }
      $i++;
    }

    return theme('table', $header, $rows);
  }
} // endfunction freelinking_page

function freelinking_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Freelink targets that need to be created');
      return $blocks;
      break;
    case 'configure':
      $form['freelinking_block_options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Freelinking Block Options')
      );
      $form['freelinking_block_options']['freelinking_blocktitle'] = array(
        '#title' => t('Title of freelinks block'),
        '#type' => 'textfield',
        '#default_value' => variable_get('freelinking_blocktitle', t('Create This Content')),
        '#size' => 30,
        '#maxlength' => 60,
        '#description' => t('Title of the block that shows freelinked phrases without content.')
      );
      for ($i = 5; $i <=30; $i=$i+5) {
        $options[$i] = $i;
      }
      $form['freelinking_block_options']['freelinking_blocknum'] = array(
        '#title' => t('Number of non-existing link phrases to show'),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => variable_get('freelinking_blocknum', '10'),
        '#description' => t('Number of phrases to show in the block.')
      );
      return $form;
      break;
      
    case 'view':
      switch ($delta) {
        case 0:
          $query = 'SELECT * FROM {freelinking} WHERE path LIKE "%node/add%" ORDER BY RAND()';
          $result = db_query($query);
          $i = 0;
          $content = '';
          while ($freelink = db_fetch_object($result)) {
            if ($i == variable_get('freelinking_blocknum', 10)) { // we're done
              break;
            }
            $items[] = l(urldecode($freelink->phrase), $freelink->path, array(), $freelink->args);
            $i++;
          } // endwhile looping through flpairs
          $block['subject'] = variable_get('freelinking_blocktitle', 'Create This Content');
          $block['content'] = theme('item_list', $items);
          return $block;
        default:
          break;
      } // endswitch $delta
    default:
      break;
  } // endswitch $op
} // endfunction freelinking_block

function freelinking_settings() {
  $restrictoptions['none'] = t('No restrictions');
  foreach (node_get_types()as $nodetype => $name) {
    $newnodeoptions[$nodetype] =  node_get_name($nodetype);
    $restrictoptions[$nodetype] =  node_get_name($nodetype);
  }
  $notfoundoptions = array(
    'create only' => t('Only try to create content'),
    'no access search' => t('Search for content if user can\'t create'),
    'always search' => t('Always search for content'),
  );
  $form["freelinking_nodetype"] = array(
    '#title' => t('Default for new content'),
    '#type' => 'select',
    '#options' => $newnodeoptions,
    '#default_value' => variable_get("freelinking_nodetype", 'blog'),
    '#description' => t('Type of content that the freelinking filter will create when clicking on a freelink without a target.')
  );
  $form['freelinking_notfound'] = array(
    '#title' => t('What to do if content not found'),
    '#type' => 'select',
    '#options' => $notfoundoptions,
    '#default_value' => variable_get('freelinking_notfound', 'no access search'),
    '#description' => t('What to do when clicking on a freelink without a target. Choose to always attempt to create the content, search if the user doesn\'t have permission to create (the default), or to always search. NOTE: search functions require search.module to be activated.'),
  );

  $form["freelinking_restriction"] = array(
    '#title' => t('Restrict free links to this content type'),
    '#type' => 'select',
    '#options' => $restrictoptions,
    '#default_value' => variable_get("freelinking_restriction", 'none'),
    '#description' => t('If desired, you can restrict the freelinking title search to just content of this type. Note that if it is not the same as the "Default for new content," above, new freelinked content cannot be found.')
  );
  $form["freelinking_camelcase"] = array(
    '#title' => t('Allow CamelCase linking'),
    '#type' => 'checkbox',
    '#default_value' => variable_get("freelinking_camelcase", 1) == 1 ? TRUE : FALSE,
    '#description' => t('If desired, you can disable CamelCase linking')
  );
  $form["freelinking_onceonly"] = array(
    '#title' => t('Only link first occurance'),
    '#type'  => 'checkbox',
    '#default_value' => variable_get("freelinking_onceonly", 0) == 1 ? TRUE : FALSE,
    '#description' => t('If desired you can only turn the first occurance of a freelink into a link. This can improve the appearance of content that includes a lot of the same CamelCase words.')
  );

  return $form;
}


function freelinking_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return (array(0 => t('freelinking filter')));
      break;

    case 'name':
      return t('freelinking filter');
      break;
    
    case 'description':
      return t('Enables freelinking between nodes with CamelCase or delimiters like [[ and ]].');
      break;

    case 'process':
      return _freelinking_do_filtering($text, FALSE);
      break;

    case 'prepare':
      return $text;
      break;

  } // endswitch $op
} // endfunction freelinking_filter

function freelinking_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'update':
      _freelinking_do_filtering($node->body, TRUE);
      break;
    case 'insert':
      _freelinking_do_filtering($node->body, TRUE);
      break;
  } // endswitch $op
} // endfunction freelinking_nodeapi

function freelinking_filter_tips($delta, $format, $long = FALSE) {
  if ($long) {
    $output  = 'Content in [[double square brackets]] will be linked to existing content with that title, or a page to create that content. ';
    $output .= 'Links can contain an optional bar, "|". Content on the left of the bar is the target; to the right, the link shown. ';
    $output .= 'Links to pages outside this site are allowed. They must start with one of the following: "http", "https", "ftp", or "mailto", and can exist either by themselves, or on the left of the bar. ';
    $output .= 'Examples: ';
    $ouptut .= '<ul>';
    $output .= '<li>[[simple link]] - will go to the content titled "simple link" or a page to create that content.</li>';
    $output .= '<li>[[this is the target|this is the source]] - will present "this is the source" as a link to "this is the target", or a page to create that content.</li>';
    $output .= '<li>[[http://www.example.com|this is the source]] - will present "this is the source" as a link to http://www.example.com.</li>';
    $output .= '<li>[[http://www.example.com]] - will present "http://www.example.com" as a link to http://www.example.com.</li>';
    $output .= '</ul>';
    if (variable_get('freelinking_camelcase', TRUE)) {
      $output .= 'Content consisting of two or more capitalized words run together (aka "CamelCase") will be linked to existing content with that title, or a page to create that content.';
    }
  }
  else { // short tips displayed in-line
    $output  = 'Link to content with [[some text]], where "some text" is the title of existing content or the title of a new piece of content to create. You can also link text to a different title by using [[link to this title|show this text]]. ';
    $output .= 'Link to outside URLs with [[http://www.example.com|some text]], or even [[http://www.example.com]]. ';
    if (variable_get('freelinking_camelcase', TRUE)) {
      $output .= 'Link to existing or new content with CamelCaseWords.';
    }
  }
  return t($output);
}

function freelinking_form_alter($form_id, &$form) {
  $type = $form['type']['#value'];

  if (variable_get('freelinking_nodetype', 'blog') == $type && $_GET['edit']) { // on the right node type, with GET data
    $form['title']['#default_value'] = $_GET['edit']['title']; // prepopulate the title field
  } // endif node type and data
} // endfunction freelinking_form_alter
    

/* 
 * PRIVATE FUNCTIONS BELOW
 *
 * Please do not use these functions outside of freelinking.module, as they are
 * subject to change without notice.
 *
*/

function _freelinking_do_filtering($text, $store = FALSE) {
  $allowcamelcase = variable_get("freelinking_camelcase", TRUE);
  $freelinkingregexp = '/\[\[.+]]/U'; // this finds [[links like this]], un-greedily
  preg_match_all($freelinkingregexp, $text, $flmatches);
  if ($allowcamelcase) {
     $camelcaseregexp = '/\b([[:upper:]][[:lower:]]+){2,}\b/'; // this gets us close, but is not perfect. Example: ThisIsACamelCaseWord won't match (two caps in a row)
     preg_match_all($camelcaseregexp, $text, $ccmatches);
     $wikiwords = array_merge($ccmatches[0], $flmatches[0]);
  }
  else {
     $wikiwords = $flmatches[0];
  }
  foreach (array_unique($wikiwords) as $wikiword) {
    if (substr($wikiword, 0, 2) == '[[') { // if it's a freelink, the expressions are different
      $phrase = substr($wikiword, 2, -2);
      $freelink = $phrase;
      $barpos = strpos($phrase, '|');
      $pattern = '/\[\[' . preg_quote($phrase,'/') . ']]/';
      if ($barpos) {
         $freelink = substr($freelink, 0, $barpos);
         $phrase = substr($phrase, $barpos + 1);
      }
      if (preg_match('/^(http|mailto|https|ftp):/', $freelink)) {
         $replacement = '<a href="' . $freelink . '">' . $phrase . '</a>';
      }
      else {
        $replacement = l($phrase, 'freelinking/' . rawurlencode($freelink));
      }
    }

    else if ($allowcamelcase) { // it's a CamelCase, expressions are a bit simpler
      $pattern = '/\b' . $wikiword . '\b(?![^<]*>)/';
      $phrase = $wikiword; // consistency for the db
      $freelink = $wikiword; // also for the db
      $replacement = l($wikiword, 'freelinking/' . urlencode($wikiword));
    }
    $text = preg_replace($pattern, $replacement, $text, variable_get("freelinking_onceonly", 0) ? 1 : -1);
    
    if ($store) {
      _freelinking_store($phrase, $replacement);
    }
  } // foreach wikiword
  return $text;
} // endfunction _freelinking_do_filtering

function _freelinking_store($phrase, $path, $args=NULL) { // store freelinking pair in the db
  $hash = md5($phrase . $path . $args);
  $query = "SELECT hash FROM {freelinking} WHERE phrase = '%s'";
  $result = db_query($query, $phrase); 
  if ( !db_num_rows($result)) { // not in the db
    $query = "INSERT INTO {freelinking} (hash, phrase, path, args) VALUES ('%s', '%s', '%s', '%s')";
    $result = db_query($query, $hash, $phrase, $path, $args);
  } // endif row not found in table
  else { // in the db, but does it match?
    $dbhash = db_fetch_object($result);
    if ($dbhash->hash != $hash) { // hashes don't match, replace db entry with new values
      $query = "UPDATE {freelinking} SET hash = '%s', path = '%s', args = '%s' WHERE phrase = '%s'";
      $result = db_query($query, $hash, $path, $args, $phrase);
    } // endif hashes don't match
  } // endifelse row found
} // endfunction _freelinking_store

function _freelinking_exists($thetitle) { // helper function for freelinking_page
  // looks through the db for nodes matching $title. Returns the nid if such a node exists, otherwise, returns 0
  $title = urldecode($thetitle);
  $query = "SELECT nid FROM {node} WHERE title = '%s'";
  $noderestrict = variable_get('freelinking_restriction', 'none');
  if ($noderestrict != 'none') { // need to add the where clause
    $query .= " AND type = '%s'";
    $result = db_query($query, $title, $noderestrict);
  }
  else { // no restriction. query is fine but db_query doesn't need the extra argument
    $result = db_query($query, $title);
  }
// FIXME ***
  while ($node = db_fetch_object($result)) { // only one, I hope... what if there's more than one?
    $nid = $node->nid;
  }
  return (empty($nid) ? 0 : $nid);
}


function _freelinking_make_link($thetitle) { // helper function for freelinking_page
  global $user;
  // Returns a link to a node named $thetitle if found, or a link to new content otherwise.
  $nid = _freelinking_exists($thetitle); 
  if ($nid) { // the node exists, set the path to go there
    $freelink['path'] = 'node/' . $nid;
  }
  else { // node doesn't exist, set path to create it
    switch (variable_get('freelinking_notfound', 'no access search')) {
      case 'create only':
        $freelink['path'] = 'node/add/' . variable_get('freelinking_nodetype', 'blog');
        $freelink['args'] = 'edit[title]=' . $thetitle;
        break;
      case 'no access search':
        if (user_access('create ' . variable_get('freelinking_nodetype', 'blog'))) {
          $freelink['path'] = 'node/add/' . variable_get('freelinking_nodetype', 'blog');
          $freelink['args'] = 'edit[title]=' . $thetitle;
        }
        else {
          $freelink['path'] = 'search/node/' . $thetitle;
        }
        break;
      case 'always search':
        $freelink['path'] = 'search/node/' . $thetitle;
        break;
    } // endswitch notfound options
  }
  _freelinking_store($thetitle, $freelink['path'], $freelink['args']);
  return $freelink;
} // endfunction _freelinking_make_link

// vim: tw=300 nowrap syn=php
