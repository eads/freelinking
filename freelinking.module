<?php
/* freelinking.module -- implements CamelCase and [[free links]] filter for Drupal
   ea. Farris <eafarris@gmail.com>
   portions based on code from crw: http://ninjafish.org/project/wiki
   built for Drupal HEAD pre 4.6

   $Id$
*/

function freelinking_menu($may_cache) {
  global $user;
  $items = array();

  if ($may_cache) {
    $items[] = array( 'path' => 'freelinking', 
                      'title' => t('freelinks'),
                      'access' => user_access('access content'),
                      'callback' => 'freelinking_page'
                    );
  }
  return $items;
} // endfunction freelinking_menu

function freelinking_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables freelinking between nodes using CamelCase and delimiters (like [[ and ]]).');
      break;
  } // endswitch ($section)
} // endfunction freelinking_help

function freelinking_page($thetitle = NULL) {
  if ($thetitle) { // find the matching title
    drupal_goto(_freelinking_make_link($thetitle));
  }
  else { // no title was passed -- show a list of wikiwords and status
    $header = array('phrase', 'status');
    $query = 'SELECT * FROM {freelinking} ORDER BY phrase';
    $result = db_query($query);
    while ($wikipair = db_fetch_object($result)) { // looping through phrase, target pairs
      $rows[] = array($wikipair->phrase, l(_freelinking_exists($wikipair->phrase) ? t('view this content') : t('create this content'), _freelinking_make_link($wikipair->phrase)));
    }
    print theme('header');
    print theme('page', theme('table', $header, $rows));
    print theme('footer');

  }
} // endfunction freelinking_page

function freelinking_settings() {
  $restrictoptions['none'] = t('No restrictions');
  foreach (node_list() as $nodetype) {
    $newnodeoptions[$nodetype] = $nodetype;
    $restrictoptions[$nodetype] = $nodetype;
  }
  $output .= form_select(t('Default for new nodes'), 'freelinking_nodetype', variable_get('freelinking_nodetype', 'blog'), $newnodeoptions, t('Type of node that the freelinking filter will create when clicking on a freelink without a target.'));
  $output .= form_select(t('Restrict free links to this node type'), 'freelinking_restriction', variable_get('freelinking_restriction','none'), $restrictoptions, t('If desired, you can restrict the freelinking title search to just nodes of this type. Note that if it is not the same as the default node type, above, new freelinked content cannot be found.'));
  $output .= form_checkbox(t('Allow CamelCase linking'), 'freelinking_camelcase', 1, variable_get('freelinking_camelcase',1) == 1 ? TRUE : FALSE, t('If desired, you can disable CamelCase linking'));

  $group = form_textfield(t('Title of freelinks block'), freelinking_blocktitle, variable_get('freelinking_blocktitle', 'Create This Content'), 30, 60, t('Title of the block that shows freelinked phrases without content.'));
  for ($i = 5; $i <=30; $i=$i+5) {
    $options[$i] = $i;
  }
  $group .= form_select(t('Number of non-existing link phrases to show'), freelinking_blocknum, variable_get('freelinking_blocknum', '10'), $options, t('Number of phrases to show in the block.'));
  $output .= form_group(t('Freelinks Block Options'), $group);

  return $output;
} // endfunction freelinking_settings

function freelinking_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return (array(0 => t('freelinking filter')));
      break;

    case 'name':
      return t('freelinking filter');
      break;

    case 'process':
// FIXME ***
      $allowcamelcase = variable_get('freelinking_camelcase', TRUE);
      if ($allowcamelcase) {
         $camelcaseregexp = '/\b([[:upper:]][[:lower:]]+){2,}\b/'; // this gets us close, but is not perfect. Example: ThisIsACamelCaseWord won't match (two caps in a row)
         preg_match_all($camelcaseregexp, $text, $ccmatches);
      }
      $freelinkingregexp = '/\[\[.+]]/U'; // this finds [[links like this]], un-greedily
      preg_match_all($freelinkingregexp, $text, $flmatches);
      if ($allowcamelcase) {
         $wikiwords = array_merge($ccmatches[0], $flmatches[0]);
      }
      else {
         $wikiwords = $flmatches[0];
      }
      foreach (array_unique($wikiwords) as $wikiword) {
        if (substr($wikiword, 0, 2) == '[[') { // if it's a freelink, the expressions are different
          $phrase = substr($wikiword, 2, -2);
          $freelink = $phrase;
          $barpos = strpos($phrase, '|');
          $pattern = '/\[\[' . preg_quote($phrase,'/') . ']]/';
          if ($barpos) {
             $phrase = substr($phrase, 0, $barpos);
             $freelink = substr($freelink, $barpos + 1);
          }
          if (substr($freelink,0,7) == 'http://') {
             $replacement = '<a href="' . $freelink . '">' . $phrase . '</a>';
          }
          else {
             $replacement = l($phrase, 'freelinking/' . urlencode($freelink));
          }
        }
        else if ($allowcamelcase) { // it's a CamelCase, expressions are a bit simpler
          $pattern = '/\b' . $wikiword . '\b/';
          $phrase = $wikiword; // consistency for the db
          $replacement = l($wikiword, 'freelinking/' . urlencode($wikiword));
        }
        $text = preg_replace($pattern, $replacement, $text);
        $query = 'SELECT phrase FROM {freelinking} WHERE phrase = "%s"';
        if ( !db_num_rows(db_query($query, $phrase))) { // not in the db
          $query = 'INSERT INTO {freelinking} (phrase) VALUES ("%s")';
          $result = db_query($query, $phrase);
        } // endif row not found in table
      } // foreach wikiword
      return $text;
      break;

    case 'prepare':
      return $text;
      break;

  } // endswitch $op
} // endfunction freelinking_filter

function freelinking_filter_tips($delta, $format, $long = FALSE) {
  if ($long) {
    $output  = 'Content in [[double square brackets]] will be linked to existing content with that title, or a page to create that content. ';
    $output .= 'Links can contain an optional bar, "|". Content on the left of the bar is the link shown; to the right, the target content. ';
    $output .= 'Links to pages outside this site are allowed. They must start with "http://", and can exist either by themselves, or on the left of the bar. ';
    $output .= 'Examples: ';
    $ouptut .= '<ul>';
    $output .= '<li>[[simple link]] - will go to the content titled "simple link" or a page to create that content.</li>';
    $output .= '<li>[[this is the source|this is the target]] - will present "this is the source" as a link to "this is the target", or a page to create that content.</li>';
    $output .= '<li>[[this is the source|http://www.example.com]] - will present "this is the source" as a link to http://www.example.com.</li>';
    $output .= '<li>[[http://www.example.com]] - will present "http://www.example.com" as a link to http://www.example.com.</li>';
    $output .= '</ul>';
    if (variable_get('freelinking_camelcase', TRUE)) {
      $output .= 'Content consisting of two or more capitalized words run together (aka "CamelCase") will be linked to existing content with that title, or a page to create that content.';
    }
  } else { // short tips displayed in-line
    $output  = 'Link to content with [[some text]], where "some text" is the title of existing content or the title of a new piece of content to create. You can also link text to a different title by using [[show this text|link to this title]]. ';
    $output .= 'Link to outside URLs with [[some text|http://www.example.com]], or even [[http://www.example.com]]. ';
    if (variable_get('freelinking_camelcase', TRUE)) {
      $output .= 'Link to existing or new content with CamelCaseWords.';
    }
  }
  return $output;
}


/* 
 * PRIVATE FUNCTIONS BELOW
 *
 * Please do not use these functions outside of freelinking.module, as they are
 * subject to change without notice.
 *
*/

function _freelinking_exists($thetitle) { // helper function for freelinking_page
  // looks through the db for nodes matching $title. Returns the nid if such a node exists, otherwise, returns 0
  $title = addslashes(urldecode($thetitle));
  $query = 'SELECT nid FROM {node} WHERE title = "%s"';
  $noderestrict = variable_get('freelinking_restriction', 'none');
  if ($noderestrict != 'none') { // need to add the where clause
    $query .= ' AND type = "%s"';
    $result = db_query($query, $title, $noderestrict);
  }
  else { // no restriction. query is fine but db_query doesn't need the extra argument
    $result = db_query($query, $title);
  }
// FIXME ***
  while ($node = db_fetch_object($result)) { // only one, I hope... what if there's more than one?
    $nid = $node->nid;
  }
  return (empty($nid) ? 0 : $nid);
}


function _freelinking_make_link($thetitle) { // helper function for freelinking_page
  // Returns a link to a node named $thetitle if found, or a link to new content otherwise.
  $nid = _freelinking_exists($thetitle); 
  if ($nid) { // the node exists, set the path to go there
    $path = 'node/' . $nid;
  }
  else { // node doesn't exist, set path to create it
    $path = _freelinking_create_new_link($thetitle);
  }

  return $path;
} // endfunction _freelinking_make_link

function _freelinking_create_new_link($thetitle) { // helper function for _freelinking_make_link
// returns a link to creating new content with $thetitle as the title.
// this is separate from _f_make_link so it can be called on its own without needing to hit the db twice.
  $nodetype = variable_get('freelinking_nodetype', 'wiki');
  $delmiter = variable_get('clean_url', 0) ? '?' : '&';
  return 'node/add/' . $nodetype . $delmiter . "edit[title]=$thetitle";
} // endfunction _freelinking_create_new_link

// vim: tw=300 nowrap syn=php
